# ********RoostGPT********
"""
Test generated by RoostGPT for test pyFlinkTest using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test pyFlinkTest using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test pyFlinkTest using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=map_7f3692eb06
ROOST_METHOD_SIG_HASH=map_898e112adc


```
Scenario 1: Initialization of actions_count state variable.
Details:
  TestName: test_map_initial_count
  Description: Test to verify that when the map function is invoked for the first time with a UserActionIn object, the actions_count state variable is properly initialized.
Execution:
  Arrange: Initialize the actions_count to None and create an instance of UserActionIn.
  Act: Call the map function with the UserActionIn instance.
  Assert: Check if the actions_count variable is updated to 1, and UserActionCount is returned with the expected user_id, last_action_time, and actions_count attributes.
Validation:
  Rational: The initialization check guarantees that the 'actions_count' behaves as expected during first-time interaction and thus ensures the business logic's integrity.
  
Scenario 2: Actions_count state variable increment
Details:
  TestName: test_map_increment_count
  Description: Test to verify that upon subsequent calls, the map function correctly increments the actions_count.
Execution:
  Arrange: Initialize the actions_count to a non-zero number and create an instance of UserActionIn.
  Act: Call the map function with the UserActionIn instance.
  Assert: Check if the actions_count variable is incremented by 1 and UserActionCount is returned with the updated actions_count.
Validation:
  Rational: This will ensure that the business logic of incrementing the actions_count is correctly implemented.

Scenario 3: UserActionCount object creation.
Details:
  TestName: test_map_return_object
  Description: Test to verify that the map function correctly creates and returns a UserActionCount object with the expected attributes.
Execution:
  Arrange: Initialize the actions_count and create an instance of UserActionIn.
  Act: Call the map function with the UserActionIn instance.
  Assert: Check if a UserActionCount object is returned with expected user_id, last_action_time, and actions_count attributes.
Validation:
  Rational: This will ensure that the UserActionCount object's creation with appropriate attribute values is correctly implemented. Ensuring proper object return is key to the downstream functionality of the application.
```

"""

# ********RoostGPT********
import pytest
from stateful_examples import ActionsCountFunction, UserActionIn, UserActionCount
from unittest.mock import MagicMock, Mock


class Test_ActionsCountFunctionMap:

    @pytest.mark.smoke
    @pytest.mark.regression
    @pytest.mark.valid
    def test_map_initial_count(self):
        # Arrange
        initial_action = UserActionIn(user_id='user1', action_time=1000)
        map_function = ActionsCountFunction()
        map_function.actions_count = Mock()
        map_function.actions_count.value = MagicMock(return_value=None)
        
        # Act
        result = map_function.map(initial_action)

        # Assert
        map_function.actions_count.update.assert_called_once_with(value=1)
        assert isinstance(result, UserActionCount)
        assert result.user_id == 'user1'
        assert result.last_action_time == 1000
        assert result.actions_count == 1

    @pytest.mark.smoke
    @pytest.mark.regression
    @pytest.mark.valid
    def test_map_increment_count(self):
        # Arrange
        subsequent_action = UserActionIn(user_id='user1', action_time=1000)
        map_function = ActionsCountFunction()
        map_function.actions_count = Mock()
        map_function.actions_count.value = MagicMock(return_value=3)
        
        # Act
        result = map_function.map(subsequent_action)

        # Assert
        map_function.actions_count.update.assert_called_once_with(value=4)
        assert isinstance(result, UserActionCount)
        assert result.user_id == 'user1'
        assert result.last_action_time == 1000
        assert result.actions_count == 4

    @pytest.mark.smoke
    @pytest.mark.regression
    @pytest.mark.valid
    def test_map_return_object(self):
        # Arrange
        action = UserActionIn(user_id='user1', action_time=1000)
        map_function = ActionsCountFunction()
        map_function.actions_count = Mock()
        map_function.actions_count.value = MagicMock(return_value=None)
        
        # Act
        result = map_function.map(action)

        # Assert
        assert isinstance(result, UserActionCount)
        assert result.user_id == 'user1'
        assert result.last_action_time == 1000
        assert result.actions_count == 1
